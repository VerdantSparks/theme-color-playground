---
const title = "Theme Color Playground";
const description =
  "A playground to explore color system in both light and dark themes, using vanilla JavaScript and CSS. No framework except Astro were used.";
import "../styles/theme.css";

// Generate URLs using config values
const siteUrl = import.meta.env.SITE.replace(/\/$/, '');
const basePath = import.meta.env.BASE_URL;
const canonicalUrl = `${siteUrl}${basePath}`;
const imageUrl = `${siteUrl}${basePath}favicon.svg`;
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href={imageUrl} />
    <link rel="icon" type="image/png" href={imageUrl} />
    <link rel="apple-touch-icon" href={imageUrl} />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    
    <!-- SEO Meta Tags -->
    <title>{title}</title>
    <meta name="description" content={description} />
    <meta name="keywords" content="theme color playground, css themes, dark mode, light mode, color picker, web design tools, css variables, color system, color scheme generator" />
    <meta name="author" content="Theme Color Playground" />
    <meta name="robots" content="index, follow" />
    <link rel="canonical" href={canonicalUrl} />
    
    <!-- Open Graph Meta Tags -->
    <meta property="og:type" content="website" />
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:url" content={canonicalUrl} />
    <meta property="og:site_name" content="Theme Color Playground" />
    <meta property="og:image" content={imageUrl} />
    <meta property="og:image:alt" content="Theme Color Playground Logo" />
    <meta property="og:locale" content="en_US" />
    
    <!-- Twitter Card Meta Tags -->
    <meta name="twitter:card" content="summary" />
    <meta name="twitter:title" content={title} />
    <meta name="twitter:description" content={description} />
    <meta name="twitter:image" content={imageUrl} />
    <meta name="twitter:image:alt" content="Theme Color Playground Logo" />
    
    <!-- Additional Meta Tags -->
    <meta name="theme-color" content="#6366f1" />
    <meta name="color-scheme" content="light dark" />
    <meta name="format-detection" content="telephone=no" />
    <meta name="mobile-web-app-capable" content="yes" />
    <meta name="apple-mobile-web-app-capable" content="yes" />
    <meta name="apple-mobile-web-app-status-bar-style" content="default" />
    <meta name="apple-mobile-web-app-title" content="Theme Playground" />
    
    <!-- Structured Data (JSON-LD) -->
    <script type="application/ld+json" set:html={JSON.stringify({
      "@context": "https://schema.org",
      "@type": "WebApplication",
      "name": "Theme Color Playground",
      "description": "A playground to explore color system in both light and dark themes, using vanilla JavaScript and CSS. No framework except Astro were used.",
      "url": canonicalUrl,
      "applicationCategory": "DesignApplication",
      "operatingSystem": "Web Browser",
      "offers": {
        "@type": "Offer",
        "price": "0",
        "priceCurrency": "USD"
      },
      "author": {
        "@type": "Organization",
        "name": "VerdantSparks"
      },
      "keywords": "theme color playground, css themes, dark mode, light mode, color picker, web design tools",
      "mainEntity": {
        "@type": "SoftwareApplication",
        "name": "Theme Color Playground",
        "applicationCategory": "WebApplication",
        "softwareVersion": "1.1.0"
      }
    })}></script>
  </head>
  <body>
    <!-- Sticky Header -->
    <header class="sticky-header">
      <div class="header-content">
        <!-- Center: Title -->
        <div class="header-center">
          <h1 class="header-title">{title}</h1>
        </div>
        
        <!-- Mobile: Combined links and buttons row -->
        <div class="header-combined-mobile">
          <!-- Links: Privacy and GitHub -->
          <div class="header-links-section">
            <nav class="header-links">
              <a href={`${import.meta.env.BASE_URL}privacy`} class="header-link">Privacy</a>
              <a href="https://github.com/ferrywlto/theme-color-playground" target="_blank" rel="noopener noreferrer" class="header-link">GitHub</a>
            </nav>
          </div>
          
          <!-- Function buttons -->
          <div class="header-buttons-section">
            <div class="header-buttons">
              <button class="theme-toggle-btn" id="theme-toggle" type="button" title="Toggle Theme">
                <span class="theme-icon">🌙</span>
              </button>
              <button
                class="download-config-btn"
                id="download-config"
                type="button"
                title="Download Theme Config"
              >
                <span class="download-icon">📥</span>
              </button>
              <button
                class="upload-config-btn"
                id="upload-config"
                type="button"
                title="Upload Theme Config"
              >
                <span class="upload-icon">📤</span>
              </button>
              <input
                type="file"
                id="file-input"
                accept=".json"
                style="display: none;"
              />
            </div>
          </div>
        </div>
      </div>
    </header>

    <main class="theme-container">
      <!-- Description Section -->
      <section class="description-section">
        <p class="description">{description}</p>
      </section>

      <!-- Color Picker Modal -->
      <div id="color-picker-modal" class="color-picker-modal">
        <div class="color-picker-overlay"></div>
        <div class="color-picker-content">
          <div class="color-picker-header">
            <h3 id="color-picker-title">Edit Color</h3>
            <button id="color-picker-close" class="color-picker-close"
              >&times;</button
            >
          </div>
          <div class="color-picker-body">
            <!-- Contrast Ratio Information -->
            <div class="contrast-info-section">
              <h4>Contrast Ratios</h4>
              <div class="contrast-info-grid">
                <div class="contrast-info-group">
                  <h5>
                    Current Color
                    <div class="color-preview-current" id="color-preview-current"></div>
                  </h5>
                  <div class="contrast-ratio-item">
                    <span class="contrast-label">vs Background:</span>
                    <span class="contrast-value" id="current-bg-contrast">-</span>
                    <span class="contrast-rating" id="current-bg-rating"></span>
                  </div>
                  <div class="contrast-ratio-item">
                    <span class="contrast-label">vs Surface:</span>
                    <span class="contrast-value" id="current-surface-contrast">-</span>
                    <span class="contrast-rating" id="current-surface-rating"></span>
                  </div>
                </div>
                <div class="contrast-info-group">
                  <h5>
                    New Color
                    <div class="color-preview-new" id="color-preview-new">
                      <input
                        type="color"
                        id="color-picker-input"
                        class="color-picker-input"
                        style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; opacity: 0; cursor: pointer;"
                      />
                    </div>
                  </h5>
                  <div class="contrast-ratio-item">
                    <span class="contrast-label">vs Background:</span>
                    <span class="contrast-value" id="new-bg-contrast">-</span>
                    <span class="contrast-rating" id="new-bg-rating"></span>
                  </div>
                  <div class="contrast-ratio-item">
                    <span class="contrast-label">vs Surface:</span>
                    <span class="contrast-value" id="new-surface-contrast">-</span>
                    <span class="contrast-rating" id="new-surface-rating"></span>
                  </div>
                  <div class="color-value-row">
                    <span class="color-value-label">HEX:</span>
                    <span id="color-hex-display" class="color-value-text">#000000</span>
                    <span id="copy-hex-btn" class="copy-badge" title="Copy HEX value">copy</span>
                  </div>
                  <div class="color-value-row">
                    <span class="color-value-label">RGB:</span>
                    <span id="color-rgb-display" class="color-value-text">(0, 0, 0)</span>
                    <span id="copy-rgb-btn" class="copy-badge" title="Copy RGB value">copy</span>
                  </div>
                </div>
              </div>
            </div>
            <div class="color-picker-actions-container">
              <div class="color-picker-actions">
                <button id="color-picker-apply" class="btn btn-primary"
                  >Apply</button
                >
                <button id="color-picker-reset" class="btn btn-warning"
                  >Reset</button
                >
                <button id="color-picker-cancel" class="btn btn-secondary"
                  >Cancel</button
                >
              </div>
            </div>
          </div>
        </div>
      </div>

      <!-- Color Palette Display -->
      <section class="color-palette-section">
        <h2>Color Palette</h2>
        <div class="color-grid">
          <div class="color-swatch bg-primary" data-color="primary">
            <span class="color-name">Primary</span>
            <span class="color-hex" data-color="primary"></span>
            <span class="color-rgb" data-color="primary"></span>
          </div>
          <div class="color-swatch bg-secondary" data-color="secondary">
            <span class="color-name">Secondary</span>
            <span class="color-hex" data-color="secondary"></span>
            <span class="color-rgb" data-color="secondary"></span>
          </div>
          <div class="color-swatch bg-success" data-color="success">
            <span class="color-name">Success</span>
            <span class="color-hex" data-color="success"></span>
            <span class="color-rgb" data-color="success"></span>
          </div>
          <div class="color-swatch bg-danger" data-color="danger">
            <span class="color-name">Danger</span>
            <span class="color-hex" data-color="danger"></span>
            <span class="color-rgb" data-color="danger"></span>
          </div>
          <div class="color-swatch bg-warning" data-color="warning">
            <span class="color-name">Warning</span>
            <span class="color-hex" data-color="warning"></span>
            <span class="color-rgb" data-color="warning"></span>
          </div>
          <div class="color-swatch bg-info" data-color="info">
            <span class="color-name">Info</span>
            <span class="color-hex" data-color="info"></span>
            <span class="color-rgb" data-color="info"></span>
          </div>
          <div class="color-swatch bg-light" data-color="light">
            <span class="color-name">Light</span>
            <span class="color-hex" data-color="light"></span>
            <span class="color-rgb" data-color="light"></span>
          </div>
          <div class="color-swatch bg-dark" data-color="dark">
            <span class="color-name">Dark</span>
            <span class="color-hex" data-color="dark"></span>
            <span class="color-rgb" data-color="dark"></span>
          </div>
          <div class="color-swatch bg-color" data-color="bg">
            <span class="color-name">Background</span>
            <span class="color-hex" data-color="bg"></span>
            <span class="color-rgb" data-color="bg"></span>
          </div>
          <div class="color-swatch bg-surface" data-color="surface">
            <span class="color-name">Surface</span>
            <span class="color-hex" data-color="surface"></span>
            <span class="color-rgb" data-color="surface"></span>
          </div>
          <div class="color-swatch bg-body" data-color="body">
            <span class="color-name">Body</span>
            <span class="color-hex" data-color="body"></span>
            <span class="color-rgb" data-color="body"></span>
          </div>
          <div class="color-swatch bg-subtle" data-color="subtle">
            <span class="color-name">Subtle</span>
            <span class="color-hex" data-color="subtle"></span>
            <span class="color-rgb" data-color="subtle"></span>
          </div>		  
        </div>
      </section>

      <!-- Component Examples -->
      <section class="component-examples">
        <h2>Component Examples</h2>

        <div class="example-card interactive-buttons">
          <h3>Interactive Buttons</h3>
          <p>
            These buttons demonstrate the different color variants available in
            both themes.
          </p>

          <!-- Text Color Control -->
          <div class="text-color-control">
            <div class="control-row main-control-row">
              <div class="radio-section">
                <label class="control-label">Button Text Color:</label>
                <div class="radio-group">
                  <label class="radio-option">
                    <input type="radio" name="button-text-color" value="light">
                    <span>Light</span>
                  </label>
                  <label class="radio-option">
                    <input type="radio" name="button-text-color" value="dark">
                    <span>Dark</span>
                  </label>
                  <label class="radio-option">
                    <input type="radio" name="button-text-color" value="body">
                    <span>Body</span>
                  </label>
                </div>
              </div>
              <div class="checkbox-section">
                <label class="checkbox-option">
                  <input type="checkbox" id="bold-text-checkbox">
                  <span>Bold text</span>
                </label>
              </div>
            </div>
          </div>

          <div class="button-group">
            <button class="btn btn-primary">Primary</button>
            <button class="btn btn-secondary" data-color="secondary"
              >Secondary</button
            >
            <button class="btn btn-success" data-color="success">Success</button
            >
            <button class="btn btn-danger" data-color="danger">Danger</button>
            <button class="btn btn-warning" data-color="warning">Warning</button
            >
            <button class="btn btn-info" data-color="info">Info</button>
            <button class="btn btn-light" data-color="light">Light</button>
            <button class="btn btn-dark" data-color="dark">Dark</button>
          </div>
        </div>

        <div class="typography-comparison">
          <!-- Background Color Typography -->
          <div class="example-card typography-bg">
            <h3>Typography on Background</h3>
            <p class="text-regular">
              Body text using the main text color for body content.
            </p>
      <p class="text-subtle">
        Subtle colored text for muted content and secondary information.
      </p>
            <p class="text-primary">
              Primary colored text for important highlights and links.
            </p>
            <p class="text-secondary">
              Secondary colored text for subtle accents and labels.
            </p>
            <p class="text-success">
              Success messages for positive feedback and confirmations.
            </p>
            <p class="text-danger">
              Error or danger messages for warnings and critical alerts.
            </p>
            <p class="text-warning">
              Warning messages for cautionary information.
            </p>
            <p class="text-info">
              Informational messages for helpful tips and details.
            </p>
      <div class="inner-card">
        <p class="text-dark">
        This is an inner card with a light border and dark text content to demonstrate contrast and readability.
        </p>
      </div>
            <p class="gradient-text">
              Beautiful gradient text combining primary and secondary colors for stunning visual effects.
            </p>
            <div class="gradient-card">
              <h4>Gradient Background Card</h4>
              <p>This card showcases a beautiful gradient background flowing from secondary to primary colors, with light text for optimal contrast and readability.</p>
            </div>
          </div>

          <!-- Surface Color Typography -->
          <div class="example-card typography-surface">
            <h3>Typography on Surface</h3>
            <p class="text-regular">
              Body text using the main text color for body content.
            </p>
      <p class="text-subtle">
        Subtle colored text for muted content and secondary information.
      </p>
            <p class="text-primary">
              Primary colored text for important highlights and links.
            </p>
            <p class="text-secondary">
              Secondary colored text for subtle accents and labels.
            </p>
            <p class="text-success">
              Success messages for positive feedback and confirmations.
            </p>
            <p class="text-danger">
              Error or danger messages for warnings and critical alerts.
            </p>
            <p class="text-warning">
              Warning messages for cautionary information.
            </p>
            <p class="text-info">
              Informational messages for helpful tips and details.
            </p>
            <div class="inner-card">
              <p class="text-dark">
                This is an inner card with a light border and dark text content to demonstrate contrast and readability.
              </p>
            </div>
            <p class="gradient-text">
              Beautiful gradient text combining primary and secondary colors for stunning visual effects.
            </p>
            <div class="gradient-card">
              <h4>Gradient Background Card</h4>
              <p>This card showcases a beautiful gradient background flowing from secondary to primary colors, with light text for optimal contrast and readability.</p>
            </div>
          </div>
        </div>

        <div class="forms-code-comparison">
          <!-- Form Elements -->
          <div class="example-card form-elements">
            <h3>Form Elements</h3>
            <p>Form inputs that adapt to the current theme automatically.</p>

            <div class="form-grid">
              <input
                type="text"
                placeholder="Enter your name"
                class="form-input"
              />
              <select class="form-select">
                <option>Choose an option</option>
                <option>Light Theme</option>
                <option>Dark Theme</option>
                <option>Auto Theme</option>
              </select>
              <textarea
                placeholder="Enter your feedback"
                rows="4"
                class="form-textarea"></textarea>
              <button class="btn btn-primary">Submit Form</button>
            </div>
          </div>

          <!-- Code Block Demonstration -->
          <div class="example-card code-elements">
            <h3>Code Examples</h3>
            <p>Code blocks and inline code that adapt to the theme colors.</p>

            <div class="code-grid">
              <p>
                Here's some <code>inline code</code> that adapts to the theme.
              </p>

              <pre><code>{`// JavaScript example
const themeManager = {
  currentTheme: 'light',

  toggleTheme() {
    this.currentTheme = this.currentTheme === 'light' ? 'dark' : 'light';
  }
};`}</code></pre>

              <pre><code>{`/* CSS Variables */
:root {
  --primary: #006564;
  --secondary: #FFC0CB;
  --bg: #FAFAFA;
}`}</code></pre>

              <p>Use <code>var(--primary)</code> for theme colors.</p>
            </div>
          </div>
        </div>
      </section>

      <!-- Instructions -->
      <section class="instructions-section">
        <h2>How to Use</h2>
        <ul>
          <li>
            Toggle between light and dark themes using the switch above, or press <kbd>Ctrl+T</kbd> for quick switching.
          </li>
          <li>
            Click on any color swatch to open the color picker and customize colors in real time.
          </li>
          <li>
            Download your customized theme configuration using the download button (📥) or upload a theme configuration file using the upload button (📤).
          </li>
          <li>
            Watch how all colors, components, and text automatically adapt to provide optimal contrast and readability.
          </li>
        </ul>
      </section>
    </main>
    <!-- 100% privacy-first analytics -->
    <script async src="https://scripts.simpleanalyticscdn.com/latest.js"></script>
    <noscript>
      <img
        src="https://queue.simpleanalyticscdn.com/noscript.gif?collect-dnt=true"
        alt=""
        referrerpolicy="no-referrer-when-downgrade"
      />
    </noscript>
  </body>
</html>

<style>
  /* Sticky Header Styles */
  .sticky-header {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    z-index: 1000;
    background: var(--surface);
    border-bottom: 2px solid var(--primary);
    backdrop-filter: blur(10px);
    -webkit-backdrop-filter: blur(10px);
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
  }

  .header-content {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0.75rem 1.5rem;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 2rem;
    flex-wrap: wrap;
  }

  .header-center {
    display: flex;
    align-items: center;
  }

  .header-title {
    color: var(--primary);
    margin: 0;
    font-size: 1.5rem;
    font-weight: 700;
    white-space: nowrap;
  }

  .header-combined-mobile {
    display: flex;
    align-items: center;
    gap: 2rem;
    flex-wrap: wrap;
  }

  .header-links-section {
    display: flex;
    align-items: center;
  }

  .header-buttons-section {
    display: flex;
    align-items: center;
  }

  .header-buttons {
    display: flex;
    align-items: center;
    gap: 0.75rem;
  }

  .header-links {
    display: flex;
    align-items: center;
    gap: 1rem;
  }

  .header-link {
    color: var(--primary);
    text-decoration: none;
    font-weight: 500;
    padding: 0.5rem 0.75rem;
    border-radius: 6px;
    transition: all 0.3s ease;
    font-size: 0.9rem;
    white-space: nowrap;
  }

  .header-link:hover {
    background: var(--primary);
    color: white;
    transform: translateY(-1px);
  }

  .header-link[target="_blank"]::after {
    content: " ↗";
    font-size: 0.7em;
    opacity: 0.7;
  }

  /* Adjust header buttons for sticky header */
  .sticky-header .theme-toggle-btn,
  .sticky-header .download-config-btn,
  .sticky-header .upload-config-btn {
    width: 40px;
    height: 40px;
    font-size: 1.2rem;
  }

  .theme-container {
    max-width: 800px;
    margin: 0 auto;
    padding: 1.5rem;
    background: var(--bg);
    color: var(--body);
    min-height: 100vh;
    margin-top: 80px; /* Space for fixed header */
  }

  .description-section {
    text-align: left;
    margin-bottom: 2rem;
  }

  .description {
    font-size: 1.125rem;
    opacity: 0.8;
    margin-bottom: 1.5rem;
  }

  .theme-toggle-btn {
    position: relative;
    width: 60px;
    height: 60px;
    border-radius: 50%;
    border: 2px solid var(--primary);
    background: transparent;
    color: var(--body);
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 1.5rem;
    transition: all 0.3s ease;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
  }

  .theme-toggle-btn:hover {
    background: var(--primary);
    color: white;
    transform: scale(1.05);
  }

  .theme-toggle-btn:active {
    transform: scale(0.95);
  }

  .theme-icon {
    font-size: 1.5rem;
    transition: transform 0.3s ease;
  }

  .theme-toggle-btn:hover .theme-icon {
    transform: rotate(180deg);
  }

  .download-config-btn {
    position: relative;
    width: 60px;
    height: 60px;
    border-radius: 50%;
    border: 2px solid var(--secondary);
    background: transparent;
    color: var(--body);
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 1.5rem;
    transition: all 0.3s ease;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
  }

  .download-config-btn:hover {
    background: var(--secondary);
    color: white;
    transform: scale(1.05);
  }

  .download-config-btn:active {
    transform: scale(0.95);
  }

  .download-icon {
    font-size: 1.5rem;
    transition: transform 0.3s ease;
  }

  .download-config-btn:hover .download-icon {
    transform: translateY(-2px);
  }

  .upload-config-btn {
    position: relative;
    width: 60px;
    height: 60px;
    border-radius: 50%;
    border: 2px solid var(--info);
    background: transparent;
    color: var(--body);
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 1.5rem;
    transition: all 0.3s ease;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
  }

  .upload-config-btn:hover {
    background: var(--info);
    color: white;
    transform: scale(1.05);
  }

  .upload-config-btn:active {
    transform: scale(0.95);
  }

  .upload-icon {
    font-size: 1.5rem;
    transition: transform 0.3s ease;
  }

  .upload-config-btn:hover .upload-icon {
    transform: translateY(-2px);
  }

  .color-palette-section {
    margin-bottom: 3rem;
  }

  .color-palette-section h2 {
    color: var(--primary);
    margin-bottom: 1.5rem;
  }

  .color-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(140px, 1fr));
    gap: 1rem;
    margin-bottom: 2rem;
  }

  .color-swatch {
    height: 120px;
    border-radius: 0.5rem;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    text-align: center;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    transition: transform 0.2s ease;
    padding: 0.5rem;
    text-shadow: 1px 1px 2px var(--body);
  }

  .color-swatch:hover {
    transform: translateY(-2px);
  }

  .color-name {
    font-weight: 600;
    font-size: 0.875rem;
    margin-bottom: 0.25rem;
  }

  .color-hex {
    font-size: 0.75rem;
    font-weight: 500;
    margin-bottom: 0.125rem;
    font-family: "Monaco", "Menlo", "Ubuntu Mono", monospace;
  }

  .color-rgb {
    font-size: 0.7rem;
    opacity: 0.8;
    font-family: "Monaco", "Menlo", "Ubuntu Mono", monospace;
  }

  .component-examples {
    margin-bottom: 3rem;
  }

  .component-examples h2 {
    color: var(--primary);
    margin-bottom: 1.5rem;
  }

  .example-card:hover {
    border-color: var(--primary) !important;
    cursor: pointer;
  }

  .instructions-section {
    margin-bottom: 2rem;
  }

  .typography-comparison {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 1rem;
    margin-bottom: 1.5rem;
  }

  .forms-code-comparison {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 1rem;
    margin-bottom: 1.5rem;
  }

  /* Example Card Styles */
  .example-card {
    padding: 1.5rem;
    border-radius: 0.75rem;
    border: 2px solid transparent;
    transition: border-color 0.3s ease;
    margin-bottom: 1.5rem;
  }

  .example-card h3 {
    color: var(--primary);
    margin-bottom: 1rem;
  }

  .interactive-buttons {
    background: var(--surface);
    color: var(--body);
  }

  .typography-bg {
    background: var(--bg);
    color: var(--body);
    border-color: var(--surface);
  }

  .typography-surface {
    background: var(--surface);
    color: var(--body);
  }

  .inner-card {
    background: var(--light);
    padding: var(--space-md);
    margin: var(--space-sm) 0;
    border-radius: var(--radius-md);
  }

  .form-elements {
    background: var(--surface);
    color: var(--body);
  }

  .code-elements {
    background: var(--surface);
    color: var(--body);
  }

  .code-grid {
    display: grid;
    gap: 1rem;
    margin-top: 1rem;
  }

  .code-grid code {
    background: var(--bg);
    padding: 0.25rem 0.5rem;
    border-radius: 0.25rem;
    font-family: "Courier New", monospace;
    font-size: 0.9em;
    border: 1px solid var(--primary);
  }

  .code-grid pre {
    background: var(--bg);
    padding: 1rem;
    border-radius: 0.5rem;
    overflow-x: auto;
    border: 1px solid var(--primary);
    margin: 0.5rem 0;
  }

  .code-grid pre code {
    background: transparent;
    padding: 0;
    border: none;
    font-size: 0.85em;
    line-height: 1.4;
  }

  .instructions-section {
    background: var(--bg);
    color: var(--body);
    padding: 1.5rem;
    border: 2px solid var(--primary);
    border-radius: 0.75rem;
    text-align: left;
    margin-bottom: 2rem;
  }

  .instructions-section h2 {
    color: var(--primary);
    margin-bottom: 1rem;
  }

  .instructions-section ul {
    list-style-type: disc;
    padding-left: 1.5rem;
    margin: 0;
  }

  .instructions-section li {
    margin-bottom: 0.75rem;
    line-height: 1.6;
  }

  .instructions-section li:last-child {
    margin-bottom: 0;
  }

  .instructions-section kbd {
    background: var(--surface);
    padding: 0.25rem 0.5rem;
    border-radius: 0.25rem;
    font-family: monospace;
  }

  /* Button Group */
  .button-group {
    display: grid;
    grid-template-columns: repeat(8, 1fr);
    gap: 0.5rem;
    margin-top: 0.5rem;
  }

  .button-group .btn {
    min-width: 0;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
  }

  /* Responsive breakpoints for button grid */
  @media (max-width: 1024px) {
    .button-group {
      grid-template-columns: repeat(4, 1fr);
    }
  }

  @media (max-width: 600px) {
    .button-group {
      grid-template-columns: repeat(2, 1fr);
    }
  }

  /* Typography Classes */
  .text-regular {
    color: var(--body);
  }

  .gradient-text {
    background: linear-gradient(45deg, var(--primary), var(--secondary));
    background-clip: text;
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    font-weight: 600;
    font-size: 1.1rem;
    margin-top: 1rem;
    padding: 0.5rem 0;
  }

  .gradient-card {
    background: linear-gradient(135deg, var(--secondary), var(--primary));
    border-radius: 0.75rem;
    padding: 1.5rem;
    margin-top: 1rem;
    color: white;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
  }

  .gradient-card h4 {
    margin: 0 0 0.75rem 0;
    font-size: 1.25rem;
    font-weight: 600;
    color: white;
  }

  .gradient-card p {
    margin: 0;
    line-height: 1.6;
    opacity: 0.95;
    color: white;
  }

  /* Form Elements */
  .form-grid {
    display: grid;
    gap: 1rem;
    max-width: 400px;
    margin-top: 1rem;
  }

  .form-input,
  .form-select,
  .form-textarea {
    padding: 0.5rem;
    border: 1px solid var(--surface);
    border-radius: 0.25rem;
    background: var(--bg);
    color: var(--body);
  }

  .form-textarea {
    resize: vertical;
  }

  /* Color Swatch Background Classes */
  .bg-color[data-bg="bg"] {
    background: var(--bg);
    color: var(--body);
    border: 1px solid var(--body);
  }

  .bg-surface {
    background: var(--surface);
    color: var(--body);
  }

  .bg-body {
    background: var(--body);
    color: var(--bg);
  }

  .bg-subtle {
    background: var(--subtle);
    color: var(--bg);
  }

  .bg-primary {
    background: var(--primary);
    color: var(--bg);
  }

  .bg-secondary {
    background: var(--secondary);
    color: var(--bg);
  }

  .bg-success {
    background: var(--success);
    color: var(--bg);
  }

  .bg-danger {
    background: var(--danger);
    color: var(--bg);
  }

  .bg-warning {
    background: var(--warning);
    color: var(--body);
  }

  .bg-info {
    background: var(--info);
    color: var(--bg);
  }

  .bg-light {
    background: var(--light);
    color: var(--body);
  }

  .bg-dark {
    background: var(--dark);
    color: var(--bg);
  }

  /* Dark theme specific color adjustments for better contrast */
  [data-theme="dark"] .color-swatch[data-color="secondary"] {
    background: var(--secondary) !important;
    color: var(--bg) !important;
  }

  [data-theme="dark"] .color-swatch[data-color="success"] {
    background: var(--success) !important;
    color: var(--bg) !important;
  }

  [data-theme="dark"] .color-swatch[data-color="warning"] {
    background: var(--warning) !important;
    color: var(--bg) !important;
  }

  [data-theme="dark"] .color-swatch[data-color="danger"] {
    background: var(--danger) !important;
    color: var(--bg) !important;
  }



  /* Color Picker Modal */
  .color-picker-modal {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    min-width: 430px;
    height: 100%;
    z-index: 2000;
    display: none;
    opacity: 0;
    transition: opacity 0.3s ease;
  }

  .color-picker-modal.active {
    display: flex;
    opacity: 1;
    align-items: center;
    justify-content: center;
  }

  .color-picker-overlay {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.5);
    cursor: pointer;
  }

  .color-picker-content {
    position: relative;
    background: var(--surface);
    border-radius: 0.75rem;
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
    max-width: 450px;
    width: 90%;
    max-height: 90vh;
    overflow-y: auto;
    z-index: 2001;
  }

  /* Wider modal for desktop screens */
  @media (min-width: 768px) {
    .color-picker-content {
      max-width: 520px;
      width: 520px;
    }
  }

  /* Even wider for larger desktop screens */
  @media (min-width: 1200px) {
    .color-picker-content {
      max-width: 580px;
      width: 580px;
    }
  }

  .color-picker-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 1rem 1.5rem;
    border-bottom: 1px solid var(--light);
  }

  .color-picker-header h3 {
    margin: 0;
    color: var(--primary);
    font-size: 1.125rem;
  }

  .color-picker-close {
    background: none;
    border: none;
    font-size: 2rem;
    cursor: pointer;
    color: var(--body);
    width: 2rem;
    height: 2rem;
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: 50%;
    transition: background-color 0.2s ease;
  }

  .color-picker-close:hover {
    background: var(--light);
  }

  .color-picker-body {
    padding: 1.5rem;
    position: relative;
    overflow: hidden;
  }

  .color-picker-actions-container {
    margin-top: 1.5rem;
    width: 100%;
    box-sizing: border-box;
  }

  .contrast-info-section {
    margin-bottom: 1.5rem;
    padding: 1rem;
    background: var(--bg);
    border-radius: 0.5rem;
    border: 1px solid var(--light);
  }

  .contrast-info-section h4 {
    margin: 0 0 1rem 0;
    color: var(--primary);
    font-size: 1.125rem;
  }

  .contrast-info-grid {
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }

  .contrast-info-group {
    background: var(--surface);
    padding: 1rem;
    border-radius: 0.5rem;
    border: 1px solid var(--light);
  }

  .contrast-info-group h5 {
    margin: 0 0 0.75rem 0;
    color: var(--body);
    font-size: 0.875rem;
    font-weight: 600;
    text-transform: uppercase;
    letter-spacing: 0.025em;
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }

  .color-preview-current,
  .color-preview-new {
    width: 100px;
    height: 1.25rem;
    border-radius: 0.25rem;
    border: 1px solid var(--light);
    position: relative;
    transition: var(--transition);
    margin-left: auto;
  }

  .color-preview-current {
    cursor: default;
  }

  .color-preview-new {
    cursor: pointer;
  }

  .color-preview-new:hover {
    border-color: var(--primary);
    box-shadow: 0 0 0 2px rgba(0, 101, 100, 0.2);
  }

  .color-value-row {
    display: grid;
    grid-template-columns: auto 1fr auto;
    align-items: center;
    gap: 0.75rem;
    margin-bottom: 0.5rem;
    padding: 0.5rem 0;
    border-bottom: 1px solid var(--light);
  }

  .color-value-row:last-child {
    margin-bottom: 0;
    border-bottom: none;
  }

  .color-value-label {
    font-weight: 500;
    color: var(--body);
    font-size: 0.875rem;
    text-align: left;
    white-space: nowrap;
  }

  .color-value-text {
    font-size: 0.875rem;
    color: var(--body);
    text-align: left;
  }

  .contrast-ratio-item {
    display: grid;
    grid-template-columns: auto 1fr auto;
    align-items: center;
    gap: 0.75rem;
    margin-bottom: 0.5rem;
    padding: 0.5rem 0;
    border-bottom: 1px solid var(--light);
  }

  .contrast-ratio-item:last-child {
    margin-bottom: 0;
    border-bottom: none;
  }

  .contrast-label {
    font-weight: 500;
    color: var(--body);
    font-size: 0.875rem;
    text-align: left;
    white-space: nowrap;
  }

  .contrast-value {
    font-size: 0.875rem;
    text-align: left;
  }

  .contrast-rating {
    font-size: 0.625rem;
    font-weight: 600;
    padding: 0.125rem 0.375rem;
    border-radius: 0.25rem;
    text-transform: uppercase;
    letter-spacing: 0.025em;
    text-align: center;
    justify-self: end;
    white-space: nowrap;
    min-width: fit-content;
  }

  .contrast-rating.excellent {
    background: var(--success);
  }

  .contrast-rating.good {
    background: var(--primary);
  }

  .contrast-rating.poor {
    background: var(--warning);
  }

  .contrast-rating.fail {
    background: var(--danger);
  }

  /* Light theme: white text for all badges */
  [data-theme="light"] .contrast-rating {
    color: white;
  }

  /* Dark theme: dark text for all badges */
  [data-theme="dark"] .contrast-rating {
    color: var(--dark);
  }

  /* Responsive contrast info for mobile */
  @media (max-width: 640px) {
    .contrast-info-grid {
      gap: 0.75rem;
    }
    
    .contrast-info-group {
      padding: 0.75rem;
    }
    
    .contrast-ratio-item,
    .color-value-row {
      grid-template-columns: auto 1fr auto;
      gap: 0.5rem;
      padding: 0.375rem 0;
    }
    
    .color-preview-current,
    .color-preview-new {
      width: 80px;
      height: 1.1rem;
    }
    
    .contrast-rating {
      font-size: 0.6875rem;
      padding: 0.0625rem 0.25rem;
    }
  }

  .color-input-group {
    margin-bottom: 1.5rem;
  }

  .color-input-group label {
    display: block;
    margin-bottom: 0.5rem;
    color: var(--body);
    font-weight: 600;
  }

  .color-picker-input {
    width: 100%;
    height: 50px;
    border: 2px solid var(--light);
    border-radius: 0.5rem;
    cursor: pointer;
    margin-bottom: 0.5rem;
  }

  .color-hex-input {
    width: 100%;
    padding: 0.75rem;
    border: 2px solid var(--light);
    border-radius: 0.5rem;
    background: var(--bg);
    color: var(--body);
    font-family: "Monaco", "Menlo", "Ubuntu Mono", monospace;
    font-size: 1rem;
  }

  .color-hex-input:focus {
    outline: none;
    border-color: var(--primary);
    box-shadow: 0 0 0 2px rgba(0, 101, 100, 0.2);
  }

  /* Input tabs */
  .input-tabs {
    display: flex;
    margin-bottom: 0.5rem;
    border-radius: 0.375rem;
    overflow: hidden;
    border: 2px solid var(--light);
  }

  .input-tab {
    flex: 1;
    padding: 0.5rem 1rem;
    border: none;
    background: var(--surface);
    color: var(--body);
    cursor: pointer;
    transition: var(--transition);
    font-weight: 500;
  }

  .input-tab:hover {
    background: var(--light);
  }

  .input-tab.active {
    background: var(--primary);
    color: var(--bg);
  }

  .input-content {
    position: relative;
  }

  .input-panel {
    display: none;
  }

  .input-panel.active {
    display: block;
  }

  /* RGB inputs */
  .rgb-inputs {
    display: grid;
    grid-template-columns: 1fr 1fr 1fr;
    gap: 0.75rem;
  }

  .rgb-input-group {
    display: flex;
    flex-direction: column;
    gap: 0.25rem;
  }

  .rgb-input-group label {
    font-size: 0.875rem;
    font-weight: 600;
    color: var(--body);
    text-align: center;
  }

  .color-rgb-input {
    width: 100%;
    padding: 0.75rem 0.5rem;
    border: 2px solid var(--light);
    border-radius: 0.375rem;
    background: var(--bg);
    color: var(--body);
    font-family: "Monaco", "Menlo", "Ubuntu Mono", monospace;
    font-size: 0.875rem;
    text-align: center;
    transition: var(--transition);
  }

  .color-rgb-input:focus {
    outline: none;
    border-color: var(--primary);
    box-shadow: 0 0 0 2px rgba(0, 101, 100, 0.2);
  }

  .color-rgb-input:invalid,
  .color-rgb-input.error {
    border-color: var(--danger);
    box-shadow: 0 0 0 2px rgba(138, 28, 51, 0.2);
  }

  .color-rgb-input:valid {
    border-color: var(--success);
  }

  /* Remove spinner arrows from number inputs */
  .color-rgb-input::-webkit-outer-spin-button,
  .color-rgb-input::-webkit-inner-spin-button {
    -webkit-appearance: none;
    margin: 0;
  }

  .color-rgb-input[type=number] {
    -moz-appearance: textfield;
  }

  .copy-badge {
    font-size: 0.625rem;
    font-weight: 600;
    padding: 0.125rem 0.375rem;
    border-radius: 0.25rem;
    text-transform: uppercase;
    letter-spacing: 0.025em;
    text-align: center;
    justify-self: end;
    white-space: nowrap;
    min-width: fit-content;
    background: var(--primary);
    color: white;
    cursor: pointer;
    transition: all 0.2s ease;
    opacity: 0.8;
    user-select: none;
  }

  .copy-badge:hover {
    opacity: 1;
    transform: scale(1.05);
  }

  .copy-badge:active {
    transform: scale(0.95);
  }

  .color-picker-actions {
    display: flex;
    gap: 0.75rem;
    justify-content: stretch;
    margin: 0;
    padding: 0;
    width: 100%;
    box-sizing: border-box;
  }

  .color-picker-actions .btn {
    flex: 1;
    text-align: center;
    box-sizing: border-box;
    min-width: 0;
    color: white !important;
  }

  /* Make color swatches clickable */
  .color-swatch {
    cursor: pointer;
    position: relative;
  }

  .color-swatch::before {
    content: "";
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 24px;
    height: 24px;
    border-radius: 50%;
    background: rgba(255, 255, 255, 0.9);
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 14px;
    opacity: 0;
    transition: opacity 0.2s ease;
    pointer-events: none;
    color: var(--body);
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2);
  }

  .color-swatch:hover::before {
    opacity: 1;
    content: "✎";
  }

  /* Mobile Responsive */
  @media (max-width: 768px) {
  /* Mobile Responsive */
  @media (max-width: 768px) {
    /* Header responsive */
    .header-content {
      flex-direction: column;
      gap: 0.75rem;
      text-align: center;
      padding: 0.5rem 1rem;
    }

    .header-combined-mobile {
      justify-content: center;
      gap: 1.5rem;
    }

    .header-title {
      font-size: 1.2rem;
    }

    .header-buttons {
      gap: 0.5rem;
    }

    .sticky-header .theme-toggle-btn,
    .sticky-header .download-config-btn,
    .sticky-header .upload-config-btn {
      width: 35px;
      height: 35px;
      font-size: 1rem;
    }

    .header-links {
      gap: 0.75rem;
    }

    .header-link {
      font-size: 0.8rem;
      padding: 0.4rem 0.6rem;
      border: 2px solid var(--primary);
      background: transparent;
      border-radius: 6px;
      display: inline-flex;
      align-items: center;
      justify-content: center;
      min-height: 35px;
      box-sizing: border-box;
    }

    /* Remove hover effects on mobile and add active/focus states */
    .header-link:hover {
      transform: none;
      background: transparent;
      color: var(--primary);
    }

    .header-link:active,
    .header-link:focus {
      background: var(--primary);
      color: white;
      transform: scale(0.95);
    }

    /* Content responsive */
    .theme-container {
      margin-top: 90px; /* Reduced gap between header and content */
      padding: 1rem;
    }

    .color-grid {
      grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
    }

    .typography-comparison {
      grid-template-columns: 1fr;
      gap: 1rem;
    }

    .forms-code-comparison {
      grid-template-columns: 1fr;
      gap: 1rem;
    }
  }

  @media (max-width: 480px) {
    .header-content {
      padding: 0.5rem;
    }

    .header-title {
      font-size: 1.1rem;
    }

    .sticky-header .theme-toggle-btn,
    .sticky-header .download-config-btn,
    .sticky-header .upload-config-btn {
      width: 32px;
      height: 32px;
      font-size: 0.9rem;
    }

    .theme-container {
      margin-top: 100px; /* Reduced gap for very small screens */
    }
  }

</style>

<style is:global>
  /* Text Color Control Styles - Global to avoid scoping issues */
  .text-color-control {
    margin-bottom: 1rem !important;
    padding: 1rem !important;
    background: var(--surface) !important;
    border-radius: 0.5rem !important;
    border: 2px solid var(--primary) !important;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1) !important;
    transition: var(--transition) !important;
    display: block !important;
    width: 100% !important;
    box-sizing: border-box !important;
  }

  .control-row {
    display: flex !important;
    align-items: center !important;
    gap: 1rem !important;
    flex-wrap: wrap !important;
  }

  .main-control-row {
    justify-content: space-between !important;
  }

  .radio-section {
    display: flex !important;
    align-items: center !important;
    gap: 1rem !important;
    flex-wrap: wrap !important;
  }

  .checkbox-section {
    display: flex !important;
    align-items: center !important;
  }

  .control-label {
    font-weight: 600 !important;
    color: var(--body) !important;
    margin: 0 !important;
    white-space: nowrap !important;
  }

  .radio-group {
    display: flex !important;
    gap: 1.5rem !important;
    align-items: center !important;
    flex-wrap: wrap !important;
  }

  .radio-option {
    display: flex !important;
    align-items: center !important;
    gap: 0.5rem !important;
    cursor: pointer !important;
    color: var(--body) !important;
    font-weight: 500 !important;
    white-space: nowrap !important;
  }

  .radio-option input[type="radio"] {
    margin: 0 !important;
    accent-color: var(--primary) !important;
  }

  /* Checkbox option styles */
  .checkbox-option {
    display: flex !important;
    align-items: center !important;
    gap: 0.5rem !important;
    cursor: pointer !important;
    color: var(--body) !important;
    font-weight: 500 !important;
    white-space: nowrap !important;
  }

  .checkbox-option input[type="checkbox"] {
    margin: 0 !important;
    accent-color: var(--primary) !important;
  }

  /* Responsive layout */
  @media (min-width: 768px) {
    .main-control-row {
      flex-wrap: nowrap !important;
    }
    
    .radio-section {
      flex: 1 !important;
    }
    
    .checkbox-section {
      margin-left: auto !important;
    }
  }

  /* Mobile: stack vertically */
  @media (max-width: 767px) {
    .main-control-row {
      flex-direction: column !important;
      align-items: flex-start !important;
      gap: 0.75rem !important;
    }
    
    .radio-section {
      width: 100% !important;
    }
    
    .checkbox-section {
      width: 100% !important;
      justify-content: flex-start !important;
    }
  }

  /* Button Text Color Variants */
  .btn.text-light {
    color: var(--light) !important;
  }

  .btn.text-dark {
    color: var(--dark) !important;
  }

  .btn.text-body {
    color: var(--body) !important;
  }


  /* Both mode text styling */
  .btn.text-both {
    background: linear-gradient(90deg, var(--light) 50%, var(--dark) 50%) !important;
    background-clip: text !important;
    -webkit-background-clip: text !important;
    -webkit-text-fill-color: transparent !important;
    color: transparent !important;
    font-weight: bold !important;
  }
</style>

<style>
</style>

<script>
  // Theme toggle functionality - ensure DOM is loaded
  document.addEventListener("DOMContentLoaded", function () {
    const themeToggle = document.getElementById("theme-toggle");
    const themeIcon = document.querySelector(".theme-icon");
    const html = document.documentElement;

    // Initialize color values first
    const colorValues = {
      light: {
        bg: "#FAFAFA",
        surface: "#E4E4E4",
        body: "#4D4D4D",
        subtle: "#656565",
        primary: "#006564",
        secondary: "#D9A0B6",
        success: "#007047",
        danger: "#8A1C33",
        warning: "#7C6100",
        info: "#2F6DB8",
        light: "#EFEFEF",
        dark: "#262626",
      },
      dark: {
        bg: "#242424",
        surface: "#4D4D4D",
        body: "#E4E4E4",
        subtle: "#6B7280",
        primary: "#00D9A8",
        secondary: "#FFC0CB",
        success: "#006564",
        danger: "#FFA0BC",
        warning: "#FFD700",
        info: "#4DA3FF",
        light: "#606060",
        dark: "#000000",
      },
    };

    let originalColorValues = {
      light: { ...colorValues.light },
      dark: { ...colorValues.dark },
    };

    // Helper function to convert hex to RGB
    function hexToRgb(hex: string) {
      const result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
      return result
        ? {
            r: parseInt(result[1], 16),
            g: parseInt(result[2], 16),
            b: parseInt(result[3], 16),
          }
        : null;
    }

    // Helper function to calculate color brightness (luminance)
    function getColorBrightness(hex: string): number {
      const rgb = hexToRgb(hex);
      if (!rgb) return 0;
      
      // Convert sRGB to linear RGB
      const toLinear = (value: number) => {
        const v = value / 255;
        return v <= 0.03928 ? v / 12.92 : Math.pow((v + 0.055) / 1.055, 2.4);
      };
      
      const r = toLinear(rgb.r);
      const g = toLinear(rgb.g);
      const b = toLinear(rgb.b);
      
      // Calculate relative luminance using ITU-R BT.709 coefficients
      return 0.2126 * r + 0.7152 * g + 0.0722 * b;
    }

    // Helper function to check if a color is dark
    function isColorDark(hex: string): boolean {
      const luminance = getColorBrightness(hex);
      return luminance < 0.5;
    }

    // Calculate contrast ratio between two colors
    function calculateContrastRatio(color1: string, color2: string): number {
      const luminance1 = getColorBrightness(color1);
      const luminance2 = getColorBrightness(color2);
      
      const lighter = Math.max(luminance1, luminance2);
      const darker = Math.min(luminance1, luminance2);
      
      return (lighter + 0.05) / (darker + 0.05);
    }

    // Get contrast rating and accessibility info
    function getContrastRating(ratio: number): { rating: string, className: string } {
      if (ratio >= 7) {
        return { rating: "AAA", className: "excellent" };
      } else if (ratio >= 4.5) {
        return { rating: "AA", className: "good" };
      } else if (ratio >= 3) {
        return { rating: "AA Large", className: "poor" };
      } else {
        return { rating: "Fail", className: "fail" };
      }
    }

    // Update contrast ratio display in the color picker
    function updateContrastRatios(currentColor: string, newColor: string) {
      const currentTheme = html.getAttribute("data-theme") || "light";
      const bgColor = (colorValues as any)[currentTheme].bg;
      const surfaceColor = (colorValues as any)[currentTheme].surface;

      // Calculate contrast ratios for current color
      const currentBgRatio = calculateContrastRatio(currentColor, bgColor);
      const currentSurfaceRatio = calculateContrastRatio(currentColor, surfaceColor);
      
      // Calculate contrast ratios for new color
      const newBgRatio = calculateContrastRatio(newColor, bgColor);
      const newSurfaceRatio = calculateContrastRatio(newColor, surfaceColor);

      // Get rating info
      const currentBgRating = getContrastRating(currentBgRatio);
      const currentSurfaceRating = getContrastRating(currentSurfaceRatio);
      const newBgRating = getContrastRating(newBgRatio);
      const newSurfaceRating = getContrastRating(newSurfaceRatio);

      // Update UI elements
      const currentBgContrastEl = document.getElementById("current-bg-contrast");
      const currentBgRatingEl = document.getElementById("current-bg-rating");
      const currentSurfaceContrastEl = document.getElementById("current-surface-contrast");
      const currentSurfaceRatingEl = document.getElementById("current-surface-rating");
      
      const newBgContrastEl = document.getElementById("new-bg-contrast");
      const newBgRatingEl = document.getElementById("new-bg-rating");
      const newSurfaceContrastEl = document.getElementById("new-surface-contrast");
      const newSurfaceRatingEl = document.getElementById("new-surface-rating");

      if (currentBgContrastEl) currentBgContrastEl.textContent = currentBgRatio.toFixed(2);
      if (currentBgRatingEl) {
        currentBgRatingEl.textContent = currentBgRating.rating;
        currentBgRatingEl.className = `contrast-rating ${currentBgRating.className}`;
      }
      
      if (currentSurfaceContrastEl) currentSurfaceContrastEl.textContent = currentSurfaceRatio.toFixed(2);
      if (currentSurfaceRatingEl) {
        currentSurfaceRatingEl.textContent = currentSurfaceRating.rating;
        currentSurfaceRatingEl.className = `contrast-rating ${currentSurfaceRating.className}`;
      }

      if (newBgContrastEl) newBgContrastEl.textContent = newBgRatio.toFixed(2);
      if (newBgRatingEl) {
        newBgRatingEl.textContent = newBgRating.rating;
        newBgRatingEl.className = `contrast-rating ${newBgRating.className}`;
      }
      
      if (newSurfaceContrastEl) newSurfaceContrastEl.textContent = newSurfaceRatio.toFixed(2);
      if (newSurfaceRatingEl) {
        newSurfaceRatingEl.textContent = newSurfaceRating.rating;
        newSurfaceRatingEl.className = `contrast-rating ${newSurfaceRating.className}`;
      }
    }

    // Function to update color values in the palette
    function updateColorValues() {
      const currentTheme = html.getAttribute("data-theme") || "light";
      const colors = (colorValues as any)[currentTheme];

      // Update each color swatch
      Object.keys(colors).forEach((colorName) => {
        const hex = colors[colorName];
        const rgb = hexToRgb(hex);

        const hexElements = document.querySelectorAll(
          `[data-color="${colorName}"].color-hex`,
        );
        const rgbElements = document.querySelectorAll(
          `[data-color="${colorName}"].color-rgb`,
        );
        
        // Get the color swatch element to update text color
        const swatchElement = document.querySelector(
          `.color-swatch[data-color="${colorName}"]`
        ) as HTMLElement;

        hexElements.forEach((el) => (el.textContent = hex));
        if (rgb) {
          rgbElements.forEach(
            (el) => (el.textContent = `rgb(${rgb.r}, ${rgb.g}, ${rgb.b})`),
          );
        }

        // Set text color based on background brightness
        if (swatchElement) {
          const textColor = isColorDark(hex) ? 'var(--light)' : 'var(--dark)';
          swatchElement.style.color = textColor;
        }
      });
    }

    function updateCSSVariables() {
      const currentTheme = html.getAttribute("data-theme") || "light";
      const colors = (colorValues as any)[currentTheme];

      // Update CSS custom properties dynamically
      Object.keys(colors).forEach((colorName) => {
        const colorValue = colors[colorName];
        document.documentElement.style.setProperty(
          `--${colorName}`,
          colorValue,
        );
      });
    }

    // Check for saved theme preference or default to light mode
    const currentTheme = localStorage.getItem("theme") || "light";

    console.log("Current theme:", currentTheme);
    console.log("Theme toggle element:", themeToggle);

    // Set initial theme and icon
    html.setAttribute("data-theme", currentTheme);
    html.classList.remove("theme-light", "theme-dark");
    html.classList.add(`theme-${currentTheme}`);

    // Update icon based on current theme
    if (themeIcon) {
      themeIcon.textContent = currentTheme === "dark" ? "☀️" : "🌙";
    }

    if (themeToggle) {
      // Toggle theme on button click
      themeToggle.addEventListener("click", function () {
        const newTheme =
          html.getAttribute("data-theme") === "light" ? "dark" : "light";
        console.log("Switching to theme:", newTheme);
        html.setAttribute("data-theme", newTheme);
        html.classList.remove("theme-light", "theme-dark");
        html.classList.add(`theme-${newTheme}`);
        localStorage.setItem("theme", newTheme);

        // Update icon
        if (themeIcon) {
          themeIcon.textContent = newTheme === "dark" ? "☀️" : "🌙";
        }

        // Update color values
        updateColorValues();

        // Update CSS variables for any custom colors
        updateCSSVariables();

        // Update button text color based on new theme
        setTextColorBasedOnTheme();
      });
    }

    // Listen for keyboard shortcuts
    document.addEventListener("keydown", (e) => {
      if (e.ctrlKey && e.key.toLowerCase() === "t") {
        e.preventDefault();
        console.log("Keyboard shortcut triggered");
        if (themeToggle) {
          themeToggle.click();
        }
      }
    });

    // Listen for system theme changes
    window
      .matchMedia("(prefers-color-scheme: dark)")
      .addEventListener("change", (e) => {
        if (!localStorage.getItem("theme")) {
          const systemTheme = e.matches ? "dark" : "light";
          html.setAttribute("data-theme", systemTheme);
          html.classList.remove("theme-light", "theme-dark");
          html.classList.add(`theme-${systemTheme}`);
          if (themeIcon) {
            themeIcon.textContent = systemTheme === "dark" ? "☀️" : "🌙";
          }
          updateColorValues();
        }
      });

    // Color Picker functionality
    const colorPickerModal = document.getElementById("color-picker-modal");
    const colorPickerTitle = document.getElementById("color-picker-title");
    const colorPickerInput = document.getElementById(
      "color-picker-input",
    ) as HTMLInputElement;
    const colorHexDisplay = document.getElementById("color-hex-display");
    const colorRgbDisplay = document.getElementById("color-rgb-display");
    const colorPreviewCurrent = document.getElementById(
      "color-preview-current",
    );
    const colorPreviewNew = document.getElementById("color-preview-new");
    const colorPickerClose = document.getElementById("color-picker-close");
    const colorPickerOverlay = document.querySelector(".color-picker-overlay");
    const applyButton = document.getElementById("color-picker-apply");
    const resetButton = document.getElementById("color-picker-reset");
    const cancelButton = document.getElementById("color-picker-cancel");
    const downloadConfigBtn = document.getElementById("download-config");
    const uploadConfigBtn = document.getElementById("upload-config");
    const fileInput = document.getElementById("file-input") as HTMLInputElement;
    const copyHexBtn = document.getElementById("copy-hex-btn");
    const copyRgbBtn = document.getElementById("copy-rgb-btn");
    let currentEditingColor: string = "";

    // Download configuration functionality
    function downloadThemeConfig() {
      const config = {
        name: "Theme Color Playground",
        version: "1.0.0",
        author: "Generated by Theme Color Playground",
        timestamp: new Date().toISOString(),
        themes: {
          light: { ...colorValues.light },
          dark: { ...colorValues.dark },
        },
        metadata: {
          currentTheme: html.getAttribute("data-theme") || "light",
          totalColors: Object.keys(colorValues.light).length,
          customized:
            JSON.stringify(colorValues) !== JSON.stringify(originalColorValues),
        },
      };

      const blob = new Blob([JSON.stringify(config, null, 2)], {
        type: "application/json",
      });
      const url = URL.createObjectURL(blob);
      const a = document.createElement("a");
      a.href = url;
      a.download = `theme-config-${new Date().toISOString().split("T")[0]}.json`;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      URL.revokeObjectURL(url);

      console.log("Theme configuration downloaded");
    }

    if (downloadConfigBtn) {
      downloadConfigBtn.addEventListener("click", downloadThemeConfig);
    }

    // Upload configuration functionality
    function uploadThemeConfig() {
      if (fileInput) {
        fileInput.click();
      }
    }

    function handleFileUpload(event: Event) {
      const target = event.target as HTMLInputElement;
      const file = target.files?.[0];

      if (!file) return;

      const reader = new FileReader();
      reader.onload = function (e) {
        try {
          const content = e.target?.result as string;
          const config = JSON.parse(content);

          // Validate the config structure
          if (!config.themes || !config.themes.light || !config.themes.dark) {
            throw new Error(
              "Invalid theme configuration file. Missing themes.light or themes.dark.",
            );
          }

          // Update colorValues with the imported configuration
          Object.keys(config.themes.light).forEach((colorName) => {
            if ((colorValues as any).light[colorName] !== undefined) {
              (colorValues as any).light[colorName] =
                config.themes.light[colorName];
            }
          });

          Object.keys(config.themes.dark).forEach((colorName) => {
            if ((colorValues as any).dark[colorName] !== undefined) {
              (colorValues as any).dark[colorName] =
                config.themes.dark[colorName];
            }
          });

          // Apply the current theme with new colors
          updateCSSVariables();
          updateColorValues();

          // Show success message
          console.log("Theme configuration imported successfully");

          // Optional: Show a temporary success notification
          showNotification(
            "Theme configuration imported successfully!",
            "success",
          );
        } catch (error) {
          console.error("Error importing theme configuration:", error);
          showNotification(
            "Error importing theme configuration. Please check the file format.",
            "error",
          );
        }
      };

      reader.readAsText(file);

      // Clear the input so the same file can be selected again
      target.value = "";
    }

    function showNotification(message: string, type: "success" | "error") {
      // Create a simple notification element
      const notification = document.createElement("div");
      notification.textContent = message;
      notification.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        padding: 1rem 1.5rem;
        border-radius: 0.5rem;
        color: white;
        font-weight: 600;
        z-index: 3000;
        max-width: 300px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
        background: ${type === "success" ? "var(--success)" : "var(--danger)"};
        transform: translateX(100%);
        transition: transform 0.3s ease;
      `;

      document.body.appendChild(notification);

      // Animate in
      setTimeout(() => {
        notification.style.transform = "translateX(0)";
      }, 100);

      // Remove after 3 seconds
      setTimeout(() => {
        notification.style.transform = "translateX(100%)";
        setTimeout(() => {
          document.body.removeChild(notification);
        }, 300);
      }, 3000);
    }

    if (uploadConfigBtn) {
      uploadConfigBtn.addEventListener("click", uploadThemeConfig);
    }

    if (fileInput) {
      fileInput.addEventListener("change", handleFileUpload);
    }

    // Add click listeners to color swatches
    document.querySelectorAll(".color-swatch[data-color]").forEach((swatch) => {
      swatch.addEventListener("click", (e) => {
        e.preventDefault();
        const colorName = swatch.getAttribute("data-color");
        if (colorName) {
          console.log("Opening color picker for:", colorName);
          openColorPicker(colorName);
        }
      });
    });

    function openColorPicker(colorName: string) {
      if (
        !colorPickerModal ||
        !colorPickerTitle ||
        !colorPickerInput ||
        !colorHexDisplay ||
        !colorRgbDisplay ||
        !colorPreviewCurrent ||
        !colorPreviewNew
      ) {
        console.error("Color picker elements not found");
        return;
      }

      currentEditingColor = colorName;
      const currentTheme = html.getAttribute("data-theme") || "light";
      const currentColor = (colorValues as any)[currentTheme][colorName];

      console.log(
        "Opening color picker for:",
        colorName,
        "Current color:",
        currentColor,
      );

      // Update modal content
      colorPickerTitle.textContent = `Edit ${colorName.charAt(0).toUpperCase() + colorName.slice(1)} Color`;
      colorPickerInput.value = currentColor;
      
      // Update display elements
      colorHexDisplay.textContent = currentColor;
      const rgb = hexToRgb(currentColor);
      if (rgb) {
        colorRgbDisplay.textContent = `(${rgb.r}, ${rgb.g}, ${rgb.b})`;
      }
      
      colorPreviewCurrent.style.backgroundColor = currentColor;
      colorPreviewNew.style.backgroundColor = currentColor;

      // Initialize contrast ratios
      updateContrastRatios(currentColor, currentColor);

      // Show modal
      colorPickerModal.classList.add("active");
      document.body.style.overflow = "hidden";
    }

    function closeColorPicker() {
      if (!colorPickerModal) return;
      colorPickerModal.classList.remove("active");
      document.body.style.overflow = "";
      currentEditingColor = "";
    }

    function updateColorPreview() {
      if (!colorPickerInput || !colorHexDisplay || !colorRgbDisplay || !colorPreviewNew) return;
      const newColor = colorPickerInput.value;
      
      // Update display elements
      colorHexDisplay.textContent = newColor;
      
      // Update RGB display
      const rgb = hexToRgb(newColor);
      if (rgb) {
        colorRgbDisplay.textContent = `(${rgb.r}, ${rgb.g}, ${rgb.b})`;
      }
      
      colorPreviewNew.style.backgroundColor = newColor;
      
      // Update contrast ratios
      if (currentEditingColor && colorPreviewCurrent) {
        const currentTheme = html.getAttribute("data-theme") || "light";
        const originalColor = (colorValues as any)[currentTheme][currentEditingColor];
        updateContrastRatios(originalColor, newColor);
      }
    }

    function applyColorChange() {
      if (!currentEditingColor || !colorPickerInput) return;

      const newColor = colorPickerInput.value;
      const currentTheme = html.getAttribute("data-theme") || "light";

      console.log("Applying color change:", currentEditingColor, newColor);

      // Update color values
      (colorValues as any)[currentTheme][currentEditingColor] = newColor;

      // Update CSS custom properties
      updateCSSVariables();

      // Update color value displays
      updateColorValues();

      // Close modal
      closeColorPicker();
    }

    function resetColorToOriginal() {
      if (!currentEditingColor) return;

      const currentTheme = html.getAttribute("data-theme") || "light";
      const originalColor = (originalColorValues as any)[currentTheme][
        currentEditingColor
      ];

      // Update color values back to original
      (colorValues as any)[currentTheme][currentEditingColor] = originalColor;

      // Update CSS custom properties
      updateCSSVariables();

      // Update color value displays
      updateColorValues();

      // Close modal
      closeColorPicker();
    }

    // Enhanced RGB input handlers
    
    // Copy functionality for color values
    async function copyToClipboard(text: string, format: string) {
      try {
        await navigator.clipboard.writeText(text);
        console.log(`${format} value copied to clipboard: ${text}`);
        
        // Show brief visual feedback
        const notification = document.createElement('div');
        notification.textContent = `${format} copied!`;
        notification.style.cssText = `
          position: fixed;
          top: 50%;
          left: 50%;
          transform: translate(-50%, -50%);
          background: var(--primary);
          color: white;
          padding: 0.5rem 1rem;
          border-radius: 0.25rem;
          font-size: 0.875rem;
          font-weight: 500;
          z-index: 10000;
          pointer-events: none;
          opacity: 0;
          transition: opacity 0.2s ease;
        `;
        document.body.appendChild(notification);
        
        // Fade in
        requestAnimationFrame(() => {
          notification.style.opacity = '1';
        });
        
        // Remove after 1.5 seconds
        setTimeout(() => {
          notification.style.opacity = '0';
          setTimeout(() => {
            document.body.removeChild(notification);
          }, 200);
        }, 1500);
        
      } catch (err) {
        console.error('Failed to copy to clipboard:', err);
        // Fallback for older browsers
        const textArea = document.createElement('textarea');
        textArea.value = text;
        document.body.appendChild(textArea);
        textArea.select();
        document.execCommand('copy');
        document.body.removeChild(textArea);
      }
    }

    function copyHexValue() {
      const hexDisplay = document.getElementById('color-hex-display') as HTMLElement;
      if (hexDisplay && hexDisplay.textContent) {
        copyToClipboard(hexDisplay.textContent, 'HEX');
      }
    }

    function copyRgbValue() {
      const rgbDisplay = document.getElementById('color-rgb-display') as HTMLElement;
      if (rgbDisplay && rgbDisplay.textContent) {
        // Convert (123, 123, 123) format to rgb(123, 123, 123) format
        const rgbText = rgbDisplay.textContent.replace(/^\(([^)]+)\)$/, 'rgb($1)');
        copyToClipboard(rgbText, 'RGB');
      }
    }

    // Event listeners for color picker
    if (colorPickerInput) {
      colorPickerInput.addEventListener("input", updateColorPreview);
      console.log("Color picker input listener added");
    }
    
    // Color picker input is now positioned directly over the new color swatch
    // No need for additional click handlers as the input handles clicks directly
    if (colorPickerClose)
      colorPickerClose.addEventListener("click", closeColorPicker);
    if (colorPickerOverlay)
      colorPickerOverlay.addEventListener("click", closeColorPicker);
    if (applyButton) applyButton.addEventListener("click", applyColorChange);
    if (resetButton)
      resetButton.addEventListener("click", resetColorToOriginal);
    if (cancelButton) cancelButton.addEventListener("click", closeColorPicker);

    // Copy button event listeners
    if (copyHexBtn) copyHexBtn.addEventListener("click", copyHexValue);
    if (copyRgbBtn) copyRgbBtn.addEventListener("click", copyRgbValue);

    // Close modal with Escape key
    document.addEventListener("keydown", (e) => {
      if (
        e.key === "Escape" &&
        colorPickerModal &&
        colorPickerModal.classList.contains("active")
      ) {
        closeColorPicker();
      }
    });

    // Initial color values update
    updateColorValues();

    // Button text color control
    const textColorRadios = document.querySelectorAll('input[name="button-text-color"]');
    const buttons = document.querySelectorAll('.button-group .btn');

    function updateButtonTextColors() {
      const selectedRadio = document.querySelector('input[name="button-text-color"]:checked') as HTMLInputElement;
      const selectedTextColor = selectedRadio?.value || 'light';
      
      buttons.forEach(button => {
        // Remove existing text color classes
        button.classList.remove('text-light', 'text-dark', 'text-body');
        // Add the selected text color class
        button.classList.add(`text-${selectedTextColor}`);
      });
    }

    function setTextColorBasedOnTheme() {
      const currentTheme = html.getAttribute("data-theme") || "light";
      // For dark theme, use light text; for light theme, use dark text for better contrast
      const recommendedTextColor = currentTheme === "dark" ? "light" : "dark";
      
      // Update radio button selection
      const radioToSelect = document.querySelector(`input[name="button-text-color"][value="${recommendedTextColor}"]`) as HTMLInputElement;
      if (radioToSelect) {
        radioToSelect.checked = true;
        updateButtonTextColors();
      }
    }

    // Add event listeners to radio buttons
    textColorRadios.forEach(radio => {
      radio.addEventListener('change', updateButtonTextColors);
    });

    // Initialize with theme-based selection
    setTextColorBasedOnTheme();

    // Bold text toggle functionality
    const boldTextCheckbox = document.getElementById('bold-text-checkbox') as HTMLInputElement;

    function updateButtonTextWeight() {
      const isBold = boldTextCheckbox?.checked || false;
      
      buttons.forEach(button => {
        const btnElement = button as HTMLElement;
        if (isBold) {
          btnElement.style.fontWeight = 'bold';
        } else {
          btnElement.style.fontWeight = '';
        }
      });
    }

    // Add event listener to bold text checkbox
    if (boldTextCheckbox) {
      boldTextCheckbox.addEventListener('change', updateButtonTextWeight);
    }

    console.log("Color picker setup complete");
  });
</script>
